//
// File generated by core/utils/src/rootcint_tmp at Fri Nov  4 16:31:03 2011

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME cintdIcintdIlibdIdll_stldIrootcint_complex
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "rootcint_complex.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void complexlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void complexlEintgR_Dictionary();
   static void *new_complexlEintgR(void *p = 0);
   static void *newArray_complexlEintgR(Long_t size, void *p);
   static void delete_complexlEintgR(void *p);
   static void deleteArray_complexlEintgR(void *p);
   static void destruct_complexlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::complex<int>*)
   {
      ::complex<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::complex<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("complex<int>", "prec_stl/complex", 25,
                  typeid(::complex<int>), DefineBehavior(ptr, ptr),
                  0, &complexlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(::complex<int>) );
      instance.SetNew(&new_complexlEintgR);
      instance.SetNewArray(&newArray_complexlEintgR);
      instance.SetDelete(&delete_complexlEintgR);
      instance.SetDeleteArray(&deleteArray_complexlEintgR);
      instance.SetDestructor(&destruct_complexlEintgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::complex<int>*)
   {
      return GenerateInitInstanceLocal((::complex<int>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::complex<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void complexlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::complex<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_complexlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::complex<int> : new ::complex<int>;
   }
   static void *newArray_complexlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::complex<int>[nElements] : new ::complex<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_complexlEintgR(void *p) {
      delete ((::complex<int>*)p);
   }
   static void deleteArray_complexlEintgR(void *p) {
      delete [] ((::complex<int>*)p);
   }
   static void destruct_complexlEintgR(void *p) {
      typedef ::complex<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::complex<int>

namespace ROOT {
   void complexlElonggR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void complexlElonggR_Dictionary();
   static void *new_complexlElonggR(void *p = 0);
   static void *newArray_complexlElonggR(Long_t size, void *p);
   static void delete_complexlElonggR(void *p);
   static void deleteArray_complexlElonggR(void *p);
   static void destruct_complexlElonggR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::complex<long>*)
   {
      ::complex<long> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::complex<long>),0);
      static ::ROOT::TGenericClassInfo 
         instance("complex<long>", "prec_stl/complex", 25,
                  typeid(::complex<long>), DefineBehavior(ptr, ptr),
                  0, &complexlElonggR_Dictionary, isa_proxy, 0,
                  sizeof(::complex<long>) );
      instance.SetNew(&new_complexlElonggR);
      instance.SetNewArray(&newArray_complexlElonggR);
      instance.SetDelete(&delete_complexlElonggR);
      instance.SetDeleteArray(&deleteArray_complexlElonggR);
      instance.SetDestructor(&destruct_complexlElonggR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::complex<long>*)
   {
      return GenerateInitInstanceLocal((::complex<long>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::complex<long>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void complexlElonggR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::complex<long>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_complexlElonggR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::complex<long> : new ::complex<long>;
   }
   static void *newArray_complexlElonggR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::complex<long>[nElements] : new ::complex<long>[nElements];
   }
   // Wrapper around operator delete
   static void delete_complexlElonggR(void *p) {
      delete ((::complex<long>*)p);
   }
   static void deleteArray_complexlElonggR(void *p) {
      delete [] ((::complex<long>*)p);
   }
   static void destruct_complexlElonggR(void *p) {
      typedef ::complex<long> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::complex<long>

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::complex< float > complexlEfloatgR;
      #else
      class complexlEfloatgR  {
         public:
         //friend XX;
         typedef void* (*value_type)() ;
         float _real; //
         float _imag; //
      };
      #endif

   } // Of namespace ROOT::Shadow
} // Of namespace ROOT

namespace ROOT {
   void complexlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void complexlEfloatgR_Dictionary();
   static void *new_complexlEfloatgR(void *p = 0);
   static void *newArray_complexlEfloatgR(Long_t size, void *p);
   static void delete_complexlEfloatgR(void *p);
   static void deleteArray_complexlEfloatgR(void *p);
   static void destruct_complexlEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::complex<float>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::complex<float>) == sizeof(::ROOT::Shadow::complexlEfloatgR));
      ::complex<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::complex<float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("complex<float>", "prec_stl/complex", 25,
                  typeid(::complex<float>), DefineBehavior(ptr, ptr),
                  &complexlEfloatgR_ShowMembers, &complexlEfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(::complex<float>) );
      instance.SetNew(&new_complexlEfloatgR);
      instance.SetNewArray(&newArray_complexlEfloatgR);
      instance.SetDelete(&delete_complexlEfloatgR);
      instance.SetDeleteArray(&deleteArray_complexlEfloatgR);
      instance.SetDestructor(&destruct_complexlEfloatgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::complex<float>*)
   {
      return GenerateInitInstanceLocal((::complex<float>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::complex<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void complexlEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::complex<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

//______________________________________________________________________________
namespace ROOT {
   void complexlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class complex<float>.
      typedef ::ROOT::Shadow::complexlEfloatgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::complex<float>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_real", &sobj->_real);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_imag", &sobj->_imag);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_complexlEfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::complex<float> : new ::complex<float>;
   }
   static void *newArray_complexlEfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::complex<float>[nElements] : new ::complex<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_complexlEfloatgR(void *p) {
      delete ((::complex<float>*)p);
   }
   static void deleteArray_complexlEfloatgR(void *p) {
      delete [] ((::complex<float>*)p);
   }
   static void destruct_complexlEfloatgR(void *p) {
      typedef ::complex<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::complex<float>

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::complex< double > complexlEdoublegR;
      #else
      class complexlEdoublegR  {
         public:
         //friend XX;
         typedef void* (*value_type)() ;
         double _real; //
         double _imag; //
      };
      #endif

   } // Of namespace ROOT::Shadow
} // Of namespace ROOT

namespace ROOT {
   void complexlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void complexlEdoublegR_Dictionary();
   static void *new_complexlEdoublegR(void *p = 0);
   static void *newArray_complexlEdoublegR(Long_t size, void *p);
   static void delete_complexlEdoublegR(void *p);
   static void deleteArray_complexlEdoublegR(void *p);
   static void destruct_complexlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::complex<double>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::complex<double>) == sizeof(::ROOT::Shadow::complexlEdoublegR));
      ::complex<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::complex<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("complex<double>", "prec_stl/complex", 25,
                  typeid(::complex<double>), DefineBehavior(ptr, ptr),
                  &complexlEdoublegR_ShowMembers, &complexlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(::complex<double>) );
      instance.SetNew(&new_complexlEdoublegR);
      instance.SetNewArray(&newArray_complexlEdoublegR);
      instance.SetDelete(&delete_complexlEdoublegR);
      instance.SetDeleteArray(&deleteArray_complexlEdoublegR);
      instance.SetDestructor(&destruct_complexlEdoublegR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::complex<double>*)
   {
      return GenerateInitInstanceLocal((::complex<double>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::complex<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void complexlEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::complex<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

//______________________________________________________________________________
namespace ROOT {
   void complexlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class complex<double>.
      typedef ::ROOT::Shadow::complexlEdoublegR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::complex<double>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_real", &sobj->_real);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_imag", &sobj->_imag);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_complexlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::complex<double> : new ::complex<double>;
   }
   static void *newArray_complexlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::complex<double>[nElements] : new ::complex<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_complexlEdoublegR(void *p) {
      delete ((::complex<double>*)p);
   }
   static void deleteArray_complexlEdoublegR(void *p) {
      delete [] ((::complex<double>*)p);
   }
   static void destruct_complexlEdoublegR(void *p) {
      typedef ::complex<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::complex<double>

namespace ROOT {
   void complexlELong64_tgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void complexlELong64_tgR_Dictionary();
   static void *new_complexlELong64_tgR(void *p = 0);
   static void *newArray_complexlELong64_tgR(Long_t size, void *p);
   static void delete_complexlELong64_tgR(void *p);
   static void deleteArray_complexlELong64_tgR(void *p);
   static void destruct_complexlELong64_tgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::complex<Long64_t>*)
   {
      ::complex<Long64_t> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::complex<Long64_t>),0);
      static ::ROOT::TGenericClassInfo 
         instance("complex<Long64_t>", "prec_stl/complex", 25,
                  typeid(::complex<Long64_t>), DefineBehavior(ptr, ptr),
                  0, &complexlELong64_tgR_Dictionary, isa_proxy, 0,
                  sizeof(::complex<Long64_t>) );
      instance.SetNew(&new_complexlELong64_tgR);
      instance.SetNewArray(&newArray_complexlELong64_tgR);
      instance.SetDelete(&delete_complexlELong64_tgR);
      instance.SetDeleteArray(&deleteArray_complexlELong64_tgR);
      instance.SetDestructor(&destruct_complexlELong64_tgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::complex<Long64_t>*)
   {
      return GenerateInitInstanceLocal((::complex<Long64_t>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::complex<Long64_t>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void complexlELong64_tgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::complex<Long64_t>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_complexlELong64_tgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::complex<Long64_t> : new ::complex<Long64_t>;
   }
   static void *newArray_complexlELong64_tgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::complex<Long64_t>[nElements] : new ::complex<Long64_t>[nElements];
   }
   // Wrapper around operator delete
   static void delete_complexlELong64_tgR(void *p) {
      delete ((::complex<Long64_t>*)p);
   }
   static void deleteArray_complexlELong64_tgR(void *p) {
      delete [] ((::complex<Long64_t>*)p);
   }
   static void destruct_complexlELong64_tgR(void *p) {
      typedef ::complex<Long64_t> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::complex<Long64_t>

/********************************************************
* cint/cint/lib/dll_stl/rootcint_complex.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablerootcint_complex();

extern "C" void G__set_cpp_environmentrootcint_complex() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("complex");
  G__cpp_reset_tagtablerootcint_complex();
}
#include <new>
extern "C" int G__cpp_dllrevrootcint_complex() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncrootcint_complex {
 public:
  G__Sizep2memfuncrootcint_complex(): p(&G__Sizep2memfuncrootcint_complex::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncrootcint_complex::*p)();
};

size_t G__get_sizep2memfuncrootcint_complex()
{
  G__Sizep2memfuncrootcint_complex a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancerootcint_complex() {

   /* Setting up class inheritance */
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablerootcint_complex() {

   /* Setting up typedef entry */
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__rootcint_complexLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__rootcint_complexLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__rootcint_complexLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__rootcint_complexLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__rootcint_complexLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__rootcint_complexLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__rootcint_complexLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__rootcint_complexLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__rootcint_complexLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__rootcint_complexLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */
extern "C" void G__cpp_setup_memvarrootcint_complex() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/

/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncrootcint_complex() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalrootcint_complex() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcrootcint_complex() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__rootcint_complexLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__rootcint_complexLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__rootcint_complexLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__rootcint_complexLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablerootcint_complex() {
  G__rootcint_complexLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__rootcint_complexLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__rootcint_complexLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__rootcint_complexLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablerootcint_complex() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__rootcint_complexLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__rootcint_complexLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__rootcint_complexLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__rootcint_complexLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setuprootcint_complex(void) {
  G__check_setup_version(30051515,"G__cpp_setuprootcint_complex()");
  G__set_cpp_environmentrootcint_complex();
  G__cpp_setup_tagtablerootcint_complex();

  G__cpp_setup_inheritancerootcint_complex();

  G__cpp_setup_typetablerootcint_complex();

  G__cpp_setup_memvarrootcint_complex();

  G__cpp_setup_memfuncrootcint_complex();
  G__cpp_setup_globalrootcint_complex();
  G__cpp_setup_funcrootcint_complex();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncrootcint_complex();
  return;
}
class G__cpp_setup_initrootcint_complex {
  public:
    G__cpp_setup_initrootcint_complex() { G__add_setup_func("rootcint_complex",(G__incsetup)(&G__cpp_setuprootcint_complex)); G__call_setup_funcs(); }
   ~G__cpp_setup_initrootcint_complex() { G__remove_setup_func("rootcint_complex"); }
};
G__cpp_setup_initrootcint_complex G__cpp_setup_initializerrootcint_complex;

