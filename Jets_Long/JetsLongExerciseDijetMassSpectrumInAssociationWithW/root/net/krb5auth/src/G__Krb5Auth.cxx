//
// File generated by core/utils/src/rootcint_tmp at Fri Nov  4 16:31:38 2011

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME netdIkrb5authdIsrcdIG__Krb5Auth
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__Krb5Auth.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TKSocket_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_TKSocket(void *p);
   static void deleteArray_TKSocket(void *p);
   static void destruct_TKSocket(void *p);
   static void streamer_TKSocket(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TKSocket*)
   {
      ::TKSocket *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TKSocket >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TKSocket", ::TKSocket::Class_Version(), "include/TKSocket.h", 31,
                  typeid(::TKSocket), DefineBehavior(ptr, ptr),
                  &::TKSocket::Dictionary, isa_proxy, 0,
                  sizeof(::TKSocket) );
      instance.SetDelete(&delete_TKSocket);
      instance.SetDeleteArray(&deleteArray_TKSocket);
      instance.SetDestructor(&destruct_TKSocket);
      instance.SetStreamerFunc(&streamer_TKSocket);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TKSocket*)
   {
      return GenerateInitInstanceLocal((::TKSocket*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TKSocket*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TKSocket::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TKSocket::Class_Name()
{
   return "TKSocket";
}

//______________________________________________________________________________
const char *TKSocket::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TKSocket*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TKSocket::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TKSocket*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TKSocket::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TKSocket*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TKSocket::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TKSocket*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TKSocket::Streamer(TBuffer &R__b)
{
   // Stream an object of class TKSocket.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void TKSocket::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TKSocket.
      TClass *R__cl = ::TKSocket::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSocket", &fSocket);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fServer", &fServer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAuthContext", &fAuthContext);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TKSocket(void *p) {
      delete ((::TKSocket*)p);
   }
   static void deleteArray_TKSocket(void *p) {
      delete [] ((::TKSocket*)p);
   }
   static void destruct_TKSocket(void *p) {
      typedef ::TKSocket current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TKSocket(TBuffer &buf, void *obj) {
      ((::TKSocket*)obj)->::TKSocket::Streamer(buf);
   }
} // end of namespace ROOT for class ::TKSocket

/********************************************************
* net/krb5auth/src/G__Krb5Auth.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__Krb5Auth();

extern "C" void G__set_cpp_environmentG__Krb5Auth() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("TKSocket.h");
  G__cpp_reset_tagtableG__Krb5Auth();
}
#include <new>
extern "C" int G__cpp_dllrevG__Krb5Auth() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TKSocket */
static int G__G__Krb5Auth_100_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TKSocket*) G__getstructoffset())->BlockRead(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (void*) (&G__Mlong(libp->para[0])), *(TKSocket::EEncoding*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Krb5Auth_100_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TKSocket*) G__getstructoffset())->BlockWrite((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (TKSocket::EEncoding) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Krb5Auth_100_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TKSocket::Connect((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Krb5Auth_100_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TKSocket::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Krb5Auth_100_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TKSocket::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Krb5Auth_100_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TKSocket::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Krb5Auth_100_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TKSocket::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Krb5Auth_100_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TKSocket*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Krb5Auth_100_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TKSocket::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Krb5Auth_100_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TKSocket::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Krb5Auth_100_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TKSocket::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Krb5Auth_100_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TKSocket::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Krb5Auth_100_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TKSocket* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TKSocket(*(TKSocket*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Krb5AuthLN_TKSocket));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TKSocket G__TTKSocket;
static int G__G__Krb5Auth_100_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TKSocket*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TKSocket*) (soff+(sizeof(TKSocket)*i)))->~G__TTKSocket();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TKSocket*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TKSocket*) (soff))->~G__TTKSocket();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Krb5Auth_100_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TKSocket* dest = (TKSocket*) G__getstructoffset();
   *dest = *(TKSocket*) libp->para[0].ref;
   const TKSocket& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TKSocket */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__Krb5Auth {
 public:
  G__Sizep2memfuncG__Krb5Auth(): p(&G__Sizep2memfuncG__Krb5Auth::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__Krb5Auth::*p)();
};

size_t G__get_sizep2memfuncG__Krb5Auth()
{
  G__Sizep2memfuncG__Krb5Auth a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__Krb5Auth() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__Krb5AuthLN_TKSocket))) {
     TKSocket *G__Lderived;
     G__Lderived=(TKSocket*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Krb5AuthLN_TKSocket),G__get_linked_tagnum(&G__G__Krb5AuthLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__Krb5Auth() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__Krb5AuthLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__Krb5AuthLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__Krb5AuthLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__Krb5AuthLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__Krb5AuthLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__G__Krb5AuthLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__Krb5AuthLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__Krb5AuthLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__Krb5AuthLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__Krb5AuthLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TKSocket */
static void G__setup_memvarTKSocket(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__Krb5AuthLN_TKSocket));
   { TKSocket *p; p=(TKSocket*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Krb5AuthLN_TSocket),-1,-1,4,"fSocket=",0,"underlying socket");
   G__memvar_setup((void*)0,89,0,0,-1,G__defined_typename("krb5_principal"),-1,4,"fServer=",0,"server principal");
   G__memvar_setup((void*)0,89,0,0,-1,G__defined_typename("krb5_auth_context"),-1,4,"fAuthContext=",0,"per connection kerberos authentication context");
   G__memvar_setup((void*)0,89,0,0,-1,G__defined_typename("krb5_context"),-2,4,"fgContext=",0,"shared kerberos context");
   G__memvar_setup((void*)0,89,0,0,-1,G__defined_typename("krb5_ccache"),-2,4,"fgCCDef=",0,"shared default credential cache");
   G__memvar_setup((void*)0,89,0,0,-1,G__defined_typename("krb5_principal"),-2,4,"fgClient=",0,"client principal");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Krb5AuthLN_TKSocketcLcLEEncoding),-1,-2,1,G__FastAllocString(2048).Format("kNone=%lldLL",(long long)TKSocket::kNone).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Krb5AuthLN_TKSocketcLcLEEncoding),-1,-2,1,G__FastAllocString(2048).Format("kSafe=%lldLL",(long long)TKSocket::kSafe).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Krb5AuthLN_TKSocketcLcLEEncoding),-1,-2,1,G__FastAllocString(2048).Format("kPriv=%lldLL",(long long)TKSocket::kPriv).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Krb5AuthLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__Krb5Auth() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTKSocket(void) {
   /* TKSocket */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__Krb5AuthLN_TKSocket));
   G__memfunc_setup("TKSocket",776,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__Krb5AuthLN_TKSocket), -1, 0, 1, 1, 4, 0, "U 'TSocket' - 0 '0' s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BlockRead",871,G__G__Krb5Auth_100_0_2, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"C - - 1 - buf i 'TKSocket::EEncoding' - 1 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BlockWrite",1014,G__G__Krb5Auth_100_0_3, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"C - - 10 - buf i - 'Int_t' 0 - len "
"i 'TKSocket::EEncoding' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Connect",714,G__G__Krb5Auth_100_0_4, 85, G__get_linked_tagnum(&G__G__Krb5AuthLN_TKSocket), -1, 0, 2, 3, 1, 0, 
"C - - 10 - server i - 'Int_t' 0 - port", (char*)NULL, (void*) G__func2void( (TKSocket* (*)(const char*, Int_t))(&TKSocket::Connect) ), 0);
   G__memfunc_setup("Class",502,G__G__Krb5Auth_100_0_5, 85, G__get_linked_tagnum(&G__G__Krb5AuthLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TKSocket::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Krb5Auth_100_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TKSocket::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Krb5Auth_100_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TKSocket::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Krb5Auth_100_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TKSocket::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Krb5AuthLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Krb5Auth_100_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Krb5Auth_100_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TKSocket::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Krb5Auth_100_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TKSocket::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Krb5Auth_100_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TKSocket::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Krb5Auth_100_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TKSocket::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TKSocket", 776, G__G__Krb5Auth_100_0_17, (int) ('i'), G__get_linked_tagnum(&G__G__Krb5AuthLN_TKSocket), -1, 0, 1, 1, 1, 0, "u 'TKSocket' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TKSocket", 902, G__G__Krb5Auth_100_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Krb5Auth_100_0_19, (int) ('u'), G__get_linked_tagnum(&G__G__Krb5AuthLN_TKSocket), -1, 1, 1, 1, 1, 0, "u 'TKSocket' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__Krb5Auth() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__Krb5Auth() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__Krb5Auth() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__Krb5AuthLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__Krb5AuthLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__Krb5AuthLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__Krb5AuthLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__Krb5AuthLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__Krb5AuthLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__Krb5AuthLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__G__Krb5AuthLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__Krb5AuthLN_TSocket = { "TSocket" , 99 , -1 };
G__linked_taginfo G__G__Krb5AuthLN_TKSocket = { "TKSocket" , 99 , -1 };
G__linked_taginfo G__G__Krb5AuthLN_TKSocketcLcLEEncoding = { "TKSocket::EEncoding" , 101 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__Krb5Auth() {
  G__G__Krb5AuthLN_TClass.tagnum = -1 ;
  G__G__Krb5AuthLN_TBuffer.tagnum = -1 ;
  G__G__Krb5AuthLN_TMemberInspector.tagnum = -1 ;
  G__G__Krb5AuthLN_TObject.tagnum = -1 ;
  G__G__Krb5AuthLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__Krb5AuthLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__Krb5AuthLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__G__Krb5AuthLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__Krb5AuthLN_TSocket.tagnum = -1 ;
  G__G__Krb5AuthLN_TKSocket.tagnum = -1 ;
  G__G__Krb5AuthLN_TKSocketcLcLEEncoding.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__Krb5Auth() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__Krb5AuthLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__Krb5AuthLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__Krb5AuthLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__Krb5AuthLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__Krb5AuthLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__Krb5AuthLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__Krb5AuthLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__Krb5AuthLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__Krb5AuthLN_TSocket);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__Krb5AuthLN_TKSocket),sizeof(TKSocket),-1,29952,"General kerberized socket",G__setup_memvarTKSocket,G__setup_memfuncTKSocket);
   G__get_linked_tagnum_fwd(&G__G__Krb5AuthLN_TKSocketcLcLEEncoding);
}
extern "C" void G__cpp_setupG__Krb5Auth(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__Krb5Auth()");
  G__set_cpp_environmentG__Krb5Auth();
  G__cpp_setup_tagtableG__Krb5Auth();

  G__cpp_setup_inheritanceG__Krb5Auth();

  G__cpp_setup_typetableG__Krb5Auth();

  G__cpp_setup_memvarG__Krb5Auth();

  G__cpp_setup_memfuncG__Krb5Auth();
  G__cpp_setup_globalG__Krb5Auth();
  G__cpp_setup_funcG__Krb5Auth();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__Krb5Auth();
  return;
}
class G__cpp_setup_initG__Krb5Auth {
  public:
    G__cpp_setup_initG__Krb5Auth() { G__add_setup_func("G__Krb5Auth",(G__incsetup)(&G__cpp_setupG__Krb5Auth)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__Krb5Auth() { G__remove_setup_func("G__Krb5Auth"); }
};
G__cpp_setup_initG__Krb5Auth G__cpp_setup_initializerG__Krb5Auth;

